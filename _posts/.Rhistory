library(stringr)
View(v)
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count < 6)
print()
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count < 6) %>%
print()
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count < 1) %>%
print()
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count > 1) %>%
print()
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count >= 1) %>%
print()
View(df)
?str_trim
synbio$applicants_clean <- str_trim(synbio$applicants_clean, side = "both")
View(synbio)
synbio$num <- rep(1, nrow(synbio)) #add column filled with number1.
dat <- melt(synbio) #melt the df
w <- dcast(dat, applicants_clean~publication_number)
x <- as.matrix(w[, -1])
x[is.na(x)] <- 0
x <- apply(x, 2,  function(x) as.numeric(x > 0))
v <- x %*% t(x)
diag(v) <- 0
dimnames(v) <- list(w[,1], w[,1]) #takes the dim names from w, note the , 1
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count >= 1) %>%
print()
View(df)
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count >= 1) %>%
print()
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count >= 1)
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count > 1)
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count >= 1)
View(df)
synbio_applicants <- read_csv("~/opensource-patent-analytics/2_datasets/synbio_patents/synbio_applicants.csv")
synbio <- select(synbio_applicants, applicants_clean, publication_number) %>%
na.omit()
synbio_applicants$applicants_clean
synbio <- select(synbio_applicants, applicants_clean, publication_number) %>%
na.omit()
synbio$applicants_clean
synbio$applicants_clean <- str_trim(synbio$applicants_clean, side = "both")
synbio$num <- rep(1, nrow(synbio))
synbio
dat <- melt(synbio) #melt the df
dat
w <- dcast(dat, applicants_clean~publication_number)
w
View(w)
w[, -1]
x <- as.matrix(w[, -1])
View(x)
x[is.na(x)] <- 0
x
x <- apply(x, 2,  function(x) as.numeric(x > 0))
x
View(x)
?%*%
?`%*%`
diag(v) <- 0
v
?t
dimnames(v) <- list(w[,1], w[,1]) #takes the dim names from w, note the , 1
df <- as.data.frame(v) %>%
add_rownames(., "source") %>%
gather(target, count, 2:388) %>%
filter(count >= 1)
View(df)
synbio_count <- synbio
View(synbio_count)
count(synbio, wt = num)
count(synbio, applicants_clean, wt = num)
count(synbio, applicants_clean, wt = num, sort = TRUE)
count(synbio_count, applicants_clean, wt = num, sort = TRUE)
unique(synbio_count$applicants_clean)
synbio_count$applicants_clean
install.packages(c("ggthemes", "leaflet", "maps"))
library("ggplot2")
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p
p + geom_tufteboxplot()
library(ggthemes)
p + geom_tufteboxplot()
p + geom_tufteboxplot(median.type = "line", whisker.type = "point", hoffset = 0)
applicants <- melt(synbio) #melt the df
a <- dcast(applicants, applicants_clean~publication_number)
b <- as.matrix(a[, -1])
b[is.na(b)] <- 0
b <- apply(b, 2,  function(b) as.numeric(b > 0))
applicants <- melt(synbio) #melt the df
a <- dcast(applicants, applicants_clean~publication_number)
b <- as.matrix(a[, -1])
b[is.na(b)] <- 0
b <- apply(b, 2,  function(x) as.numeric(b > 0))
applicants <- melt(synbio) #melt the df
library(readr)
library(dplyr)
library(tidyr)
library(reshape2)
library(stringr)
applicants <- melt(synbio) #melt the df
a <- dcast(applicants, applicants_clean~publication_number)
b <- as.matrix(a[, -1])
b[is.na(b)] <- 0
b <- apply(b, 2,  function(x) as.numeric(b > 0))
b
str(b)
str(x)
synbio <- read_csv("~/opensource-patent-analytics/2_datasets/synbio_patents/synbio_applicants.csv") %>%
select(applicants_clean, publication_number) %>%
na.omit() #ignore any date warnings
synbio$applicants_clean <- str_trim(synbio$applicants_clean, side = "both")
synbio$Weight <- rep(1, nrow(synbio))
applicants <- melt(synbio) #melt the df
a <- dcast(applicants, applicants_clean~publication_number)
str(w)
a
dat <- melt(synbio) #melt the df
w <- dcast(dat, applicants_clean~publication_number)
applicants <- melt(synbio) #melt the df
a <- dcast(applicants, applicants_clean~publication_number)
w
a
x <- as.matrix(w[, -1])
x
b <- as.matrix(a[, -1])
str(x)
str(b)
x[is.na(x)] <- 0
b[is.na(b)] <- 0
str(x)
str(b)
x <- apply(x, 2,  function(x) as.numeric(x > 0))
b <- apply(b, 2,  function(x) as.numeric(b > 0))
str(x)
str(b)
b[is.na(b)] <- 0
str(b)
x <- as.matrix(w[, -1])
str(x)
x[is.na(x)] <- 0
str(x)
b <- as.matrix(a[, -1])
str(b)
b[is.na(b)] <- 0
str(b)
x <- apply(x, 2,  function(x) as.numeric(x > 0))
str(x)
b <- apply(b, 2,  function(x) as.numeric(b > 0))
str(b)
b <- apply(b, 2,  function(x) as.numeric(x > 0))
str(b)
x <- as.matrix(a[, -1])
x[is.na(x)] <- 0
x <- apply(x, 2,  function(x) as.numeric(x > 0))
str(x)
b <- as.matrix(a[, -1])
b[is.na(b)] <- 0
str(b)
b <- apply(b, 2,  function(x) as.numeric(x > 0))
str(b)
x <- apply(x, 2,  function(x) as.numeric(x > 0))
str(x)
c <- b %*% t(b) #transpose
str(c)
v <- x %*% t(x) #transpose
str(v)
diag(c) <- 0 #remove the diagonal
dimnames(c) <- list(a[,1], a[,1]) #takes the dim names from a
c
class(c)
ncol(c)
as.data.frame(c) %>%
add_rownames(., "Source") %>%
gather(Target, Weight, 2:363) %>%
filter(Weight >= 1)
edges <-
as.data.frame(c)
ncol(edges)
ncol(c)
View(edges)
n <- ncol(c) #count number of columns for gather (note rows are zero)
edges <-
as.data.frame(c) %>%
add_rownames(., "Source") %>%
gather(Target, Weight, 2:n+1) %>%
filter(Weight >= 1)
View(edges)
n <- ncol(c)+1 #count number of columns for gather (note rows are zero)
n
edges <-
as.data.frame(c) %>%
add_rownames(., "Source") %>% #adds 1 column
gather(Target, Weight, 2:n) %>%
filter(Weight >= 1)
View(edges)
df <- read_csv("~/opensource-patent-analytics/2_datasets/synbio_patents/synbio_applicants.csv") %>%
select(applicants_clean, publication_number) %>%
na.omit() #ignore any date warnings
df$applicants_clean <- str_trim(df$applicants_clean, side = "both")
df$Weight <- rep(1, nrow(df))
applicants <- melt(df)
a <- dcast(applicants, applicants_clean~publication_number)
b <- as.matrix(a[, -1])
b
str(b)
b
ncol(b)
a <- dcast(applicants, applicants_clean~publication_number)
b <- as.matrix(a[, -1]) #selects publication numbers
b[is.na(b)] <- 0 # convert NA to 0
ncol(b)
dimnames(b)
b <- apply(b, 2,  function(x) as.numeric(x > 0)) #return numeric vector from columns (2 see ?apply)
class(b)
View(b)
?margins
margins(b)
c <- b %*% t(b) #transpose
View(c)
applicants <- melt(df)
a <- dcast(applicants, applicants_clean~publication_number)
b <- as.matrix(a[, -1]) #selects publication numbers
b[is.na(b)] <- 0 # convert NA to 0
b <- apply(b, 2,  function(x) as.numeric(x > 0)) #return numeric vector from Margin (columns 2 see ?apply)
c <- b %*% t(b)
View(c)
?t
?`%*%
`
names(c)
crossprod(b)
p <- crossprod(b)
names(p)
nodes <-
count(df, applicants_clean, wt = Weight, sort = TRUE) %>%
distinct(applicants_clean) %>%
rename("Records" = n) %>%
write_csv(nodes, "nodes.csv")
df <- read_csv("~/opensource-patent-analytics/2_datasets/synbio_patents/synbio_applicants.csv") %>%
select(applicants_clean, publication_number) %>%
na.omit() #ignore date warnings
df$applicants_clean <- str_trim(df$applicants_clean, side = "both")
df$Weight <- rep(1, nrow(df))
nodes <-
count(df, applicants_clean, wt = Weight, sort = TRUE) %>%
distinct(applicants_clean) %>%
rename("Records" = n) %>%
write_csv(nodes, "nodes.csv")
nodes <- count(df, applicants_clean, wt = Weight, sort = TRUE) %>%
distinct(applicants_clean) %>%
rename("Records" = n) %>%
write_csv(., "nodes.csv")
applicants <- melt(df)
a <- dcast(applicants, applicants_clean~publication_number)
b <- as.matrix(a[, -1]) #selects publication numbers
b[is.na(b)] <- 0 # convert NA to 0
b <- apply(b, 2,  function(x) as.numeric(x > 0)) #return numeric vector from Margin (columns 2 see ?apply)
c <- b %*% t(b) # multiply and transpose matrix. This looks like the key. Note loses names. Try crossprod.
diag(c) <- 0 #remove the diagonal
dimnames(c) <- list(a[,1], a[,1]) #takes the dim names from a
n <- ncol(c)+1
dges <-
as.data.frame(c) %>%
add_rownames(., "Source") %>% #adds 1 column
gather(Target, Weight, 2:n) %>%
filter(Weight >= 1)
edges$Type <- "Undirected" #Add type
write_csv(., "edges.csv")
edges <-
as.data.frame(c) %>%
add_rownames(., "Source") %>% #adds 1 column
gather(Target, Weight, 2:n) %>%
filter(Weight >= 1)
edges$Type <- "Undirected" #Add type
write_csv(., "edges.csv")
edges <- as.data.frame(c) %>%
add_rownames(., "Source") %>% #adds 1 column
gather(Target, Weight, 2:n) %>%
filter(Weight >= 1)
edges$Type <- "Undirected" #Add type
write_csv(., "edges.csv")
edges <- as.data.frame(c) %>%
add_rownames("Source") %>%
gather(Target, Weight, 2:n) %>%
filter(Weight >= 1)
edges$Type <- "Undirected" #Add type
write_csv(., "edges.csv")
c
edges <- as.data.frame(c) %>%
add_rownames("Source") %>%
gather(Target, Weight, 2:n) %>%
filter(Weight >= 1)
n <- ncol(c)+1 #count number of columns for gather (note rows are zero). add_rownames increments by 1.
edges <- as.data.frame(c) %>%
add_rownames("Source") %>%
gather(Target, Weight, 2:n) %>%
filter(Weight >= 1)
edges$Type <- "Undirected" #Add type column
write_csv(edges, "edges.csv")
library("rcrossref", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c("gtable", "Matrix", "RCurl", "scales", "XML"))
install.packages(c("gtable", "Matrix", "RCurl", "scales", "XML"))
install.packages(c("gtable", "Matrix", "RCurl", "scales", "XML"))
install.packages(c("gtable", "Matrix", "RCurl", "scales", "XML"))
install.packages(c("RCurl", "XML"))
library(readr)
library(readxl)
library(rgbif)
library(tidyr)
library(dplyr)
uganda <- read_excel("/Users/pauloldham17inch/Desktop/GIZ\ Africa/Uganda/uganda_species.xlsx")
View(uganda)
uganda_species <- uganda$species
View(uganda)
library("curl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
h <- new_handle()
h
handle_setopt(h, customrequest = "PUT")
h
handle_setform(h, a = "1", b = "2")
h
r <- curl_fetch_memory("http://httpbin.org/put", h)
r
content(r)
library(httr)
content(r)
cat(rawToChar(r$content))
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
power <- function(exponent) {
function(x) {
x ^ exponent
}
}
square <- power(2)
square(2)
square(4)
cube <- power(3)
cube(2)
cube(4)
call_me_twice <- function(f) {
function(...) {
f(...)
f(...)
}
}
jfun <- function(x) cat(x, "\n")
jfun("a")
jfun(1)
jfunner <- call_me_twice(jfun)
jfunner("a")
VERB <- function(url, = "URL!"){
list(url=url
status=sample(c(200, 500), size = 1, prob = c(0.6, 0.4)),
content = rnorm(5))
}
VERB <- function(url, = "URL!")
list(url=url
status=sample(c(200, 500), size = 1, prob = c(0.6, 0.4)),
content = rnorm(5))
VERB <- function(url, = "URL!")
list(url=url
status=sample(c(200, 500), size = 1, prob = c(0.6, 0.4)),
content = rnorm(5)
VERB <- function(url, = "URL!")
list(url=url,
status=sample(c(200, 500), size = 1, prob = c(0.6, 0.4)),
content = rnorm(5))
VERB()
VERB <- function(url = "URL!")
list(url=url,
status=sample(c(200, 500), size = 1, prob = c(0.6, 0.4)),
content = rnorm(5))
VERB()
VERB()
replicate(5, VERB())
test <- replicate(5, VERB())
test
test <- rep(5, VERB())
test
VERB_twice <- call_me_twice(VERB)
replicate(5, VERB-twice())
VERB_twice <- call_me_twice(VERB)
replicate(5, VERB_twice())
test <- call_me_twice(VERB)
replicate(5, test())
test
VERB_twice <- call_me_twice(VERB)
replicate(5, VERB_twice())
VERB_twice <- call_me_twice(VERB)
replicate(5, VERB_twice())
VERB <- function(url = "URL!") {
req <- list(url = url, #this is now named object
status = sample(c(200, 500), size = 1, prob = c(0.6, 0.4)),
content = rnorm(5))
message(req$status) #this has been added
req
}
replicate(5, VERB())
VERB_twice <- call_me_twice(VERB)
replicate(5, VERB_twice())
call_me_n <- function(f, n = 3) {
function(...) for (i in seq_len(n)) f(...)
}
VERB_3 <- call_me_n(VERB)
VERB_3()
x <- VERB_3()
str(x)
VERB_3 <- call_me_n(VERB)
VERB_3
call_me_n <- function(f, n = 3) {
function(...) {
for (i in seq_len(n)) out <- f(...) #creating and then printing out object
out
}
}
VERB_3 <- call_me_n(VERB)
VERB_3
VERB_3()
VERB_n <- function(VERB, n = 3) {
function(...) {
for (i in seq_len(n)) {
out <- VERB(...)
if (out$status < 499 || i == n) break
backoff <- runif(n = 1, min = 0, max = 2 ^ i - 1)
message("HTTP error ", out$status, " on attempt ", i,
" ... retrying after a back off of ", round(backoff, 2),
" seconds.")
Sys.sleep(backoff)
}
out
}
}
?Sys.sleep
VERB_n <- function(VERB, n = 3) {
function(...) {
for (i in seq_len(n)) {
out <- VERB(...)
if (out$status < 499 || i == n) break
backoff <- runif(n = 1, min = 0, max = 2 ^ i - 1)
message("HTTP error ", out$status, " on attempt ", i,
" ... retrying after a back off of ", round(backoff, 2),
" seconds.")
Sys.sleep(backoff) #suspends execution for a specified time interbal defined by backoff
}
out
}
}
VERB_n(2)
VERB_n(n=2)
VERB_5 <- VERB_n(VERB, n = 5)
VERB_5("Owls can rotate their necks 270 degrees")
VERB_5("Owls are cute.")
VERB_5("A group of owls is called a Parliament.")
?httr::GET
install.packages(c("curl", "devtools", "ggthemes", "lubridate", "plotly"))
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(knitr)
my.jekyll.site <- "/Users/pauloldham17inch/poldham.github.io"
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-02-26-lens.Rmd")
getwd()
setwd("/Users/pauloldham17inch/poldham.github.io/_posts")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-02-26-lens.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-02-26-lens.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-02-26-lens.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-02-26-lens.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-02-26-lens.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-02-26-lens.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-04-20-infographics.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-04-20-infographics.Rmd")
qplot(x = pubyear, y = publications, data = pizza_total, geom = "line")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-04-20-infographics.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-04-20-infographics.Rmd")
KnitPost("/Users/pauloldham17inch/poldham.github.io/2016-04-20-infographics.Rmd")
